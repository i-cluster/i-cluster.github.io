I"*<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42586">프로그래머스 스택/큐 42586 기능개발</a></p>

<h3 id="문제">문제</h3>

<pre><code>프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
- 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
- 작업 진도는 100 미만의 자연수입니다.
- 작업 속도는 100 이하의 자연수입니다.
- 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
</code></pre>

<p>입출력 예</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">progresses</th>
      <th style="text-align: center">speeds</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[93, 30, 55]</td>
      <td style="text-align: center">[1, 30, 5]</td>
      <td style="text-align: center">[2, 1]</td>
    </tr>
    <tr>
      <td style="text-align: center">[95, 90, 99, 99, 80, 99]</td>
      <td style="text-align: center">[1, 1, 1, 1, 1, 1]</td>
      <td style="text-align: center">[1, 3, 2]</td>
    </tr>
  </tbody>
</table>

<h3 id="접근">접근</h3>

<p>선작업이 반드시 먼저 끝나야 하기 때문에 선입선출(FIFO) 방식으로 문제를 푼다ㅏ.</p>

<p>모든 작업은 자신의 앞에 있는 작업들 중 가장 시간이 오래 걸리는 작업을 기준으로 배포하게 된다. 만약 앞에 있는 모든 작업들이 자신보다 시간이 적게 걸린다면, 자기자신이 새로운 배포 기준이 된다.</p>

<p>배열을 순회하면서 지금까지의 최대 작업시간을 갱신한다. 만약 현재 작업의 소요 시간이 최대 작업시간보다 짧거나 같다면 그 작업이 끝나야 같이 배포할 수 있으므로 동시 배포 작업 수 +1을 한다. 작업의 소요 시간이 더 길다면 이미 앞쪽 작업들은 모두 완료, 배포될 것이기 때문에 새로운 배포 횟수를 더하고 최대 작업시간을 작업의 소요 시간으로 갱신한다.</p>

<h3 id="풀이">풀이</h3>

<p>조건문으로 현재 문자의 패턴 내 존재 여부에 따라 분기점을 구분한다.</p>

<ol>
  <li>문자와 패턴 마지막 문자가 일치하면 for문으로 패턴을 검사한다. 불일치하는 구간이 있을 경우 i를 1 증가시키고 빠져나온다.</li>
  <li>일치하지는 않지만 패턴 내에 있다면 패턴 내에서의 문자 위치에서 탐색할 수 있도록 i를 조정한다. 코드에서는 for문으로 구현했지만, 패턴을 거꾸로 뒤집고 <code>index()</code> 함수로 찾아도 된다.</li>
  <li>문자가 아예 패턴 내에 없는 문자라면 패턴의 길이만큼 i를 스킵한다.</li>
</ol>

<pre><code class="language-python">def solution(progresses, speeds):
    day = 0
		answer = []
    for i in range(len(speeds)):
        cur_work = (99 - progresses[i]) // speeds[i] + 1
        if cur_work &lt;= day:
            answer[-1] += 1
        else:
            day = cur_work
            answer.append(1)
    
    return answer
</code></pre>

<hr />

:ET