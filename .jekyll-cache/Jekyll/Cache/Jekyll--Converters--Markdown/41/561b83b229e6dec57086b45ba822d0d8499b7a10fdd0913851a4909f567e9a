I"<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42586">프로그래머스 스택/큐 42586 기능개발</a></p>

<h3 id="문제">문제</h3>

<pre><code>프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
- 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
- 작업 진도는 100 미만의 자연수입니다.
- 작업 속도는 100 이하의 자연수입니다.
- 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
</code></pre>

<p>입출력 예</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">progresses</th>
      <th style="text-align: center">speeds</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[93, 30, 55]</td>
      <td style="text-align: center">[1, 30, 5]</td>
      <td style="text-align: center">[2, 1]</td>
    </tr>
    <tr>
      <td style="text-align: center">[95, 90, 99, 99, 80, 99]</td>
      <td style="text-align: center">[1, 1, 1, 1, 1, 1]</td>
      <td style="text-align: center">[1, 3, 2]</td>
    </tr>
  </tbody>
</table>

<h3 id="접근">접근</h3>

<p>현재 작업을 언제 배포할 수 있는지를 파악하는 것이 중요하다.</p>

<p>선작업들이 모두 완료되어야 하기 때문에 현재 작업의 배포 시점은 자신보다 앞에 있는 작업들 중 가장 시간이 오래 걸리는 작업의 배포 시점과 동일하다. 만일 현재 작업이 앞에 있는 모든 작업들보다 오래 걸린다면, 모든 배포가 먼저 끝나버리기 때문에 자기자신이 새로운 배포 시점이 된다.</p>

<p>배열을 순회하면서 지금까지의 최대 작업시간을 갱신한다. 만약 현재 작업의 소요 시간이 최대 작업시간보다 짧거나 같다면 그 작업이 끝나야 같이 배포할 수 있으므로 동시 배포 작업 수 +1을 한다. 작업의 소요 시간이 더 길다면 이미 앞쪽 작업들은 모두 완료, 배포될 것이기 때문에 새로운 배포 횟수를 더하고 최대 작업시간을 작업의 소요 시간으로 갱신한다.</p>

<h3 id="풀이">풀이</h3>

<p>배포 기준이 되는(가장 시간이 오래 걸리는) 작업을 day 변수로 설정하고, <code>progresses</code>와 <code>speeds</code> 배열을 돌면서 배포 기준을 갱신한다.</p>

<ol>
  <li>현재 작업이 완료되기까지 남은 시간을 계산한다(<code>cur_work</code>). 100이 아닌 99에서 빼고 1을 더해준 이유는 속도가 남은 진도보다 클 경우(ex. 진도 99, 속도 2) 몫을 구할 때 0으로 계산되는 걸 막기 위해서다.</li>
  <li>남은 작업 시간이 day보다 작다면 day의 작업이 배포될 때 같이 배포될 것이므로 큐의 마지막 요소에 1을 더한다.</li>
  <li>day보다 크다면 앞의 모든 작업이 먼저 배포되기 때문에 새로운 배포 시점 1을 큐에 더한다.</li>
</ol>

<pre><code class="language-python">def solution(progresses, speeds):
    day = 0
		answer = []
    for i in range(len(speeds)):
        cur_work = (99 - progresses[i]) // speeds[i] + 1
        if cur_work &lt;= day:
            answer[-1] += 1
        else:
            day = cur_work
            answer.append(1)
    
    return answer
</code></pre>

<hr />

:ET